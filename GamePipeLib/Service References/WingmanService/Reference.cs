//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GamePipeLib.WingmanService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WingmanService.IWingmanService")]
    public interface IWingmanService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWingmanService/AddAcfFileToHitList", ReplyAction="http://tempuri.org/IWingmanService/AddAcfFileToHitListResponse")]
        void AddAcfFileToHitList(string filePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWingmanService/AddAcfFileToHitList", ReplyAction="http://tempuri.org/IWingmanService/AddAcfFileToHitListResponse")]
        System.Threading.Tasks.Task AddAcfFileToHitListAsync(string filePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWingmanService/RemoveAcfFileFromHitList", ReplyAction="http://tempuri.org/IWingmanService/RemoveAcfFileFromHitListResponse")]
        void RemoveAcfFileFromHitList(string filePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWingmanService/RemoveAcfFileFromHitList", ReplyAction="http://tempuri.org/IWingmanService/RemoveAcfFileFromHitListResponse")]
        System.Threading.Tasks.Task RemoveAcfFileFromHitListAsync(string filePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWingmanService/SetRestartSteamOnExit", ReplyAction="http://tempuri.org/IWingmanService/SetRestartSteamOnExitResponse")]
        void SetRestartSteamOnExit(bool restartRequested);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWingmanService/SetRestartSteamOnExit", ReplyAction="http://tempuri.org/IWingmanService/SetRestartSteamOnExitResponse")]
        System.Threading.Tasks.Task SetRestartSteamOnExitAsync(bool restartRequested);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWingmanService/HitListHasItems", ReplyAction="http://tempuri.org/IWingmanService/HitListHasItemsResponse")]
        bool HitListHasItems();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWingmanService/HitListHasItems", ReplyAction="http://tempuri.org/IWingmanService/HitListHasItemsResponse")]
        System.Threading.Tasks.Task<bool> HitListHasItemsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWingmanServiceChannel : GamePipeLib.WingmanService.IWingmanService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WingmanServiceClient : System.ServiceModel.ClientBase<GamePipeLib.WingmanService.IWingmanService>, GamePipeLib.WingmanService.IWingmanService {
        
        public WingmanServiceClient() {
        }
        
        public WingmanServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WingmanServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WingmanServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WingmanServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddAcfFileToHitList(string filePath) {
            base.Channel.AddAcfFileToHitList(filePath);
        }
        
        public System.Threading.Tasks.Task AddAcfFileToHitListAsync(string filePath) {
            return base.Channel.AddAcfFileToHitListAsync(filePath);
        }
        
        public void RemoveAcfFileFromHitList(string filePath) {
            base.Channel.RemoveAcfFileFromHitList(filePath);
        }
        
        public System.Threading.Tasks.Task RemoveAcfFileFromHitListAsync(string filePath) {
            return base.Channel.RemoveAcfFileFromHitListAsync(filePath);
        }
        
        public void SetRestartSteamOnExit(bool restartRequested) {
            base.Channel.SetRestartSteamOnExit(restartRequested);
        }
        
        public System.Threading.Tasks.Task SetRestartSteamOnExitAsync(bool restartRequested) {
            return base.Channel.SetRestartSteamOnExitAsync(restartRequested);
        }
        
        public bool HitListHasItems() {
            return base.Channel.HitListHasItems();
        }
        
        public System.Threading.Tasks.Task<bool> HitListHasItemsAsync() {
            return base.Channel.HitListHasItemsAsync();
        }
    }
}
